#!/usr/bin/env node
'use strict';

var cluster = require('cluster');
var os = require('os');
var path = require('path');
var pkg = require('../package.json');
var program = require('commander');
var thundermole = require('..');
var tryRequire = require('../lib/try-require');
var winston = require('winston');
require('winston-syslog');

configureProgram(program);
runProgram(program);

function configureProgram (program) {
	program.version(pkg.version)
		.option('-c, --config <path>', 'the directory to look for config files in')
		.option('-C, --cluster', 'create a cluster of workers for handling requests')
		.option('-p, --port <port>', 'the port to run on')
		.option('-w, --workers <num>', 'the number of workers to add to the cluster')
		.option('-r, --rewrite-host-header', 'whether to rewrite the host header')
		.option('-P, --ping-url <url>', 'A ping URL for the application')
		.parse(process.argv);
	defaultProgramProperties(program);
}

function runProgram (program) {
	var logger = createLogger(tryRequire(path.join(program.config, 'syslog.json')));
	if (program.cluster && cluster.isMaster) {
		runThunderMoleMaster(program, logger);
	} else {
		runThunderMoleWorker(program, logger);
	}
}

function defaultProgramProperties (program) {
	var cpuCount = os.cpus().length;
	program.config = (program.config || '../config');
	program.cluster = !!program.cluster;
	program.port = parseInt(program.port || process.env.PORT || 3000, 10);
	program.workers = parseInt(program.workers || cpuCount, 10);
	program.workers = Math.min(program.workers, cpuCount);
	program.rewriteHostHeader = program.rewriteHostHeader || false;
	program.pingUrl = program.pingUrl || null;
}

function createLogger (syslogConfig) {
	var syslogConfig = tryRequire(path.join(program.config, 'syslog.json'));
	var logger = new winston.Logger({
		transports: [
			new (winston.transports.Console)(),
			new (winston.transports.Syslog)(syslogConfig)
		]
	});
	return logger;
}

function runThunderMoleMaster (program, logger) {
	logger.info('Master process running, port: %d, pid: %d', program.port, process.pid);
	for (var i = 0; i < program.workers; i += 1) {
		cluster.fork();
	}
	cluster.on('exit', handleDeadWorker.bind(null, logger));
}

function runThunderMoleWorker (program, logger) {
	var mole = thundermole({
		logger: logger,
		routes: tryRequire(path.join(program.config, 'routes.json')),
		statsd: tryRequire(path.join(program.config, 'statsd.json')),
		rewriteHostHeader: program.rewriteHostHeader,
		pingUrl: program.pingUrl
	});
	mole.listen(program.port, function (error) {
		var workerName = 'Worker process' + (cluster.isWorker ? ' ' + cluster.worker.id : '');
		if (error) {
			return logger.error('%s failed to start: %s', workerName, error.message, function () {
				setTimeout(function () { process.exit(1); }, 500);
			});
		}
		logger.info('%s running, port: %d, pid: %d', workerName, program.port, process.pid);
	});
}

// TODO write the log in the process "beforeExit" event once we can update to Node 0.12
function handleDeadWorker (logger, worker) {
	logger.warn('Worker process ' + worker.id + ' died');
	cluster.fork();
}
