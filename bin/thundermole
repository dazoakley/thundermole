#!/usr/bin/env node
'use strict';

var cluster = require('cluster');
var os = require('os');
var path = require('path');
var pkg = require('../package.json');
var program = require('commander');
var thundermole = require('..');
var tryRequire = require('../lib/try-require');
var winston = require('winston');
require('winston-syslog');

configureProgram(program);
runProgram(program);

function configureProgram (program) {
	program.version(pkg.version)
		.option('-c, --config <path>', 'the directory to look for config files in')
		.option('-C, --cluster', 'create a cluster of workers for handling requests')
		.option('-p, --port <port>', 'the port to run on')
		.option('-w, --workers <num>', 'the number of workers to add to the cluster')
		.parse(process.argv);
	defaultProgramProperties(program);
}

function runProgram (program) {
	var logger = createLogger(tryRequire(path.join(program.config, 'syslog.json')));
	if (program.cluster && cluster.isMaster) {
		runThunderMoleMaster(program, logger);
	} else {
		runThunderMoleWorker(program, logger);
	}
}

function defaultProgramProperties (program) {
	var cpuCount = os.cpus().length;
	program.config = (program.config || '../config');
	program.cluster = !!program.cluster;
	program.port = parseInt(program.port || process.env.PORT || 3000, 10);
	program.workers = parseInt(program.workers || cpuCount, 10);
	program.workers = Math.min(program.workers, cpuCount);
}

function createLogger (syslogConfig) {
	var syslogConfig = tryRequire(path.join(program.config, 'syslog.json'));
	var logger = new winston.Logger({
		transports: [
			new (winston.transports.Console)(),
			new (winston.transports.Syslog)(syslogConfig)
		]
	});
	logger.setLevels(winston.config.syslog.levels);
	return logger;
}

function runThunderMoleMaster (program, logger) {
	logger.info('ThunderMole Master running');
	for (var i = 0; i < program.workers; i += 1) {
		cluster.fork();
	}
	cluster.on('exit', handleDeadWorker);
}

function runThunderMoleWorker (program, logger) {
	var applicationName = 'ThunderMole';
	if (cluster.isWorker) {
		 applicationName += ' Worker ' + cluster.worker.id + ' (' + process.pid + ')';
	}
	var mole = thundermole({
		logger: logger,
		routes: tryRequire(path.join(program.config, 'routes.json')),
		statsd: tryRequire(path.join(program.config, 'statsd.json'))
	});
	mole.listen(program.port, function (error) {
		if (error) {
			logger.error('%s failed to start:', applicationName);
			logger.error(error.stack);
			process.exit(1);
		}
		logger.info('%s running on port %d', applicationName, program.port);
	});
}

function handleDeadWorker (worker) {
	logger.warn('ThunderMole Worker ' + worker.id + ' died');
	cluster.fork();
}
